name: "backend"

on:
  pull_request:
    branches: [master]
    paths:
      - 'lab5/backend/**'

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{github.repository}}-backend
  WORKDIR: lab5/backend

jobs:
  build:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: lab5/backend

    steps:
      - name: checkout
        uses: actions/checkout@v4
    
      - name: set up jdk
        uses: actions/setup-java@v3
        with:
          java-version: 17
          distribution: 'temurin'

      - name: cache dependencies
        uses: actions/cache@v3
        with:
          path: |
           ~/.gradle/caches
           ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/gradle-wrapper.properties', '**/build.gradle') }}
      
      - name: build & test
        run: |
          echo Starting build...
          START=$(date -u +'%Y-%m-%dT%H:%M:%SZ')

          chmod +x gradlew
          ./gradlew clean build test

          END=$(date -u +'%Y-%m-%dT%H:%M:%SZ')
          ELAPSED=$(( $END - $START ))

          GREEN=$'\033[0;32m'
          RESET=$'\033[0m' 
          echo -e "${GREEN}Build Succeeded within ${ELAPSED}${RESET}"
  
  dockerfile-check:
    runs-on: ubuntu-latest
    steps:
      - name: checkout
        uses: actions/checkout@v4

      - name: execute verify
        run: |
          echo "::group::🔍 Starting Dockerfile validation"
          GREEN=$'\033[0;32m'
          RESET=$'\033[0m'

          DOCKERFILE_PATH="lab5/backend/Dockerfile"
          
          if [ ! -f "$DOCKERFILE_PATH" ]; then
            echo "::error::🚨 Dockerfile not found at: $DOCKERFILE_PATH"
            echo "::endgroup::"
            exit 1
          fi

          echo "✅ Dockerfile exists"
          echo "📄 File content preview:"
          head -n 5 "$DOCKERFILE_PATH"
          
          if ! grep -q '^FROM' "$DOCKERFILE_PATH"; then
            echo "::error::🚫 Missing FROM instruction in Dockerfile"
            echo "::endgroup::"
            exit 1
          fi

          echo "🔄 Trying to build test image..."
          docker build -t test-image "$(dirname "$DOCKERFILE_PATH")"
          
          echo "::endgroup::"
          echo -e "$🎉${GREEN}All checks passed! You're ready to go${RESET}🚀"

  environment-set:
    outputs:
      branch: ${{ steps.extract-branch.outputs.branch }}
    runs-on: ubuntu-latest
    name: environment-set
    steps:

      - name: extract-branch
        shell: bash
        id: extract-branch
        run: echo "branch=${GITHUB_HEAD_REF:-${GITHUB_REF#refs/heads/}}" >> $GITHUB_OUTPUT

  publish:
    needs: [build, dockerfile-check]
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    
    steps:
      - name: checkout
        uses: actions/checkout@v4

      - name: setup docker buildx
        uses: docker/setup-buildx-action@v2
      
      - name: login to docker hub
        uses: docker/login-action@v2
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.TOKEN }}
      
      - name: extract meta
        id: meta
        uses: docker/metadata-action@v4
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        
      - name: publish
        uses: docker/build-push-action@v4
        with:
          context: ${{ env.WORKDIR }}
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          no-cache: true
  
  deploy:
    runs-on: [ self-hosted, Linux, X64 ]
    needs: [publish, environment-set]
    steps:

      - name: login to docker
        uses: docker/login-action@v2
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.TOKEN }}
      
      - name: remove previous version
        continue-on-error: true
        run: |
          docker stop meow-service || true
          docker rm meow-service || true
      
      - name: redeploy
        run: |
          docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          docker run \
            --name meow-service \
            -p 5000:8080 \
            -d \
            -t \
            --restart=unless-stopped \
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}